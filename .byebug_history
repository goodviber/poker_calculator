c
numbers_only.detect{ |e| hands_array.count(e) > 4 }
numbers_only = hands_array.map{ |e| e.gsub(/[hdcs]+/, '') }
numbers_only = hands_array.map{ |e| e.gsub(/\[hdcs]+/, '') }
hands_array
numbers_only = hands_array.map{ |e| e.gsub(/\d+/, '') }
hands_array.detect{ |e| hands_array.count(e) > 1 }
hands_array.size
unique_count = hands_array.uniq.size
hands_array = @players_hands.split(/\W+/)
c
hands_array.detect{ |e| hands_array.count(e) > 1 }
hands_array.count("2d")
hands_array.count("2h")
hands_array.detect{ |e| hands_array.count(e) == 0 }
hands_array.detect{ |e| hands_array.count(e) = 0 }
hands_array.detect{ |e| hands_array.count(e) > 0 }
hands_array.detect{ |e| hands_array.count(e) > 4 }
hands_array.detect{ |e| hands_array.count(e) > 4 }.size == 0
hands_array = @players_hands.split(/\W+/)
@players_hands.split(/\W+/).size
@players_hands.split(/\W+/).uniq.size
@players_hands.split(/\W+/).uniq
@players_hands.split(/\W+/)
@players_hands
players_hands
c
Analyser.new(File.read("spec/fixtures/files/duplicate_cards.txt"))
c
Analyser.new(File.read("spec/fixtures/files/test_cards.txt"))
c
Analyser.new(File.read("spec/fixtures/files/test_cards.txt"))
c
Analyser.new(File.read("spec/fixtures/files/test_cards.txt"))
c
Analyser.new(File.read("spec/fixtures/files/test_cards.txt"))
c
File.read("spec/fixtures/files/test_cards.txt").class
File.read("spec/fixtures/files/test_cards.txt")
Analyser.new(File.read("spec/fixtures/files/test_cards.txt"))
Analyser.new(File.read("../spec/fixtures/files/test_cards.txt"))
Analyser.new(File.read("/spec/fixtures/files/test_cards.txt"))
c
Analyser.new(File.read("/spec/fixtures/files/test_cards.txt"))
Analyser.new(File.read("../spec/fixtures/files/test_cards.txt"))
Analyser.new(File.read("/spec/fixtures/files/test_cards.txt"))
c
Analyser.new(file_fixture("test_cards.txt"))
c
self.to_s
self
hand
@cards.methods
@cards
c
@cards.size
@cards
c
hand1.cards.size
hand1.cards
grouped.map{|ar| [ar.size, ar.first.ordinal]}
grouped.map{|ar| ar.size, ar.first.ordinal}
grouped.map{|ar| ar.size}
grouped.map{|ar| puts ar.first}
grouped.map{|ar| ar}
grouped
grouped.map{|ar| puts ar}
grouped.map{|ar| puts arr}
grouped = hand1.cards.group_by(&:face).values
hand1.cards.group_by(&:face).values
hand1.cards.group_by(&:face)
hand1
